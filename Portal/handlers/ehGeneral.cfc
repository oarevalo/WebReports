<cfcomponent extends="eventHandler">		<cffunction name="onApplicationStart">		<!--- application initialization code goes here --->		<cfset application.currentSessions = structNew()>	</cffunction>	<cffunction name="onRequestStart" access="public" returntype="void">		<cfset var event = getValue("event")>			<!--- these are the events that are allowed without requiring a logged-in user --->		<cfset var lstOpenEvents = "ehGeneral.dspStart,ehGeneral.dspLogin,ehGeneral.doLogin,ehGeneral.doOpenReport,ehSetup.dspCreateAdmin,ehSetup.doCreateAdmin,ehGeneral.doAuthReport,ehGeneral.doAuthDesigner">		<!--- make sure we have the session variables needed --->		<cfparam name="session.userID" type="string" default="">		<cfparam name="session.qryUser" type="query" default="#QueryNew("")#">		<cfparam name="session.userKey" type="string" default="">		<!--- set commonly-used values --->		<cfset setValue("useManagedReports", getSetting("useManagedReports"))>		<cfset setValue("versionTag", getSetting("versionTag"))>		<cfset setValue("logoImageURL", getSetting("logoImageURL"))>		<cfset setValue("logoLinkURL", getSetting("logoLinkURL"))>		<cfset setValue("qryUser", session.qryUser)>		<!--- check if the Reports Designed app is present --->		<cfset setValue("hasReportDesigner", directoryExists(expandPath("/WebReports/Designer")))>		<!--- do security check --->		<cfif val(session.userID) eq 0 and not listFindNoCase(lstOpenEvents,event)>			<cfset setMessage("warning","Please login to continue")>			<cfset setNextEvent("ehGeneral.dspStart")>		</cfif>				<!--- check for restricted (admin only) areas --->		<cfif session.userID gt 0 and listFirst(event,".") neq "ehGeneral">			<cfif not isBoolean(session.qryUser.isAdmin) or not session.qryUser.isAdmin>				<cfset setMessage("warning","The requested feature is available only to Administrators")>				<cfset setNextEvent("ehGeneral.dspStart")>			</cfif>		</cfif>	</cffunction>	<cffunction name="onRequestEnd" access="public" returntype="void">		<!--- code to execute at the end of each request --->	</cffunction>	<cffunction name="dspStart" access="public" returntype="void">		<cfscript>			var obj = 0;			var qry = 0;			var df = getService("DAOFactory");			var searchTerm = getValue("searchTerm","");			var showDesignReport = 0;			var hasReportDesigner = getValue("hasReportDesigner");			var qryUser = getValue("qryUser");			var useManagedReports = getValue("useManagedReports");						if(getSetting("useManagedReports")) {				// check if there are any users created				obj = createObject("component","WebReports.Common.Components.portal.users").init(df);				qry = obj.searchUsers();				if(not qry.recordCount) {					setNextEvent("ehSetup.dspCreateAdmin");				}								obj = createObject("component","WebReports.Common.Components.portal.reportLibrary").init(df);				if(session.userID eq "")					qry = obj.getPublicReports();				else					qry = obj.getUserReports(session.userID);				if(searchTerm neq "") 					qry = filterReports(qry,"reportName,description,reportHREF",searchTerm);			} else {				qry = getFiles(getSetting("reportRepositoryPath"));				if(searchTerm neq "") 					qry = filterReports(qry,"name",searchTerm);			}							// see if we should show the link to the report designer			showDesignReport = hasReportDesigner and								(not useManagedReports or (useManagedReports  															and qryUser.recordCount gt 0 															and (qryUser.isDeveloper or qryUser.isAdmin)));							setValue("qryReports",qry);			setValue("searchTerm",searchTerm);			setValue("showDesignReport",showDesignReport);							setView("vwStart");		</cfscript>	</cffunction>	<cffunction name="dspLogin" access="public" returntype="void">		<cfset session.userID = "">		<cfset session.qryUser = QueryNew("")>		<cfset setView("vwLogin")>	</cffunction>	<cffunction name="dspAdminHome" access="public" returntype="void">		<cfset setView("vwAdminHome")>	</cffunction>	<cffunction name="doLogin" access="public" returntype="void">		<cfscript>			try {				obj = createObject("component","WebReports.Common.Components.portal.users").init(getService("DAOFactory"));					username = getValue("username","");				password = getValue("password","");					qryUser = obj.checkLogin(username, password);					if(qryUser.recordCount eq 0) {					throw("Invalid username/password");										} else {					session.userID = qryUser.userID;					session.qryUser = qryUser;					session.userKey = createUUID();					// keep a registry of the authorized sessions on the application scope for easy access					application.currentSessions[session.userKey] = structNew();					application.currentSessions[session.userKey].userID = qryUser.userID;					application.currentSessions[session.userKey].loginTime = now();				}					setNextEvent("ehGeneral.dspStart");			} catch(any e) {				setMessage("error", e.message & "<br>" & e.detail);				setNextEvent("ehGeneral.dspLogin");			}					</cfscript>	</cffunction>	<cffunction name="doLogout" access="public" returntype="void">		<!--- clear values from session --->		<cfset session.userID = "">		<cfset session.qryUser = QueryNew("")>		<cfset session.userKey = "">		<!--- remove from authenticated sessions registry --->		<cfif structKeyExists(application.currentSessions,session.userKey)>			<cfset structDelete(application.currentSessions, session.userKey)>		</cfif>		<cfset setNextEvent("ehGeneral.dspStart")>	</cffunction>			<cffunction name="doOpenReport" access="public" returntype="void">		<cfscript>			var df = getService("DAOFactory");			var reportID = getValue("reportID","");			var reportFileName = getValue("filename","");			var arg_connectionName = getValue("_c","");			var arg_datasource = getValue("_d","-1");			var arg_username = getValue("_u","-1");			var arg_password = getValue("_p","-1");			var useManagedReports = getSetting("useManagedReports");			var qryUser = getValue("qryUser");			var hasAccess = false;			var userID = 0;			var bOpenWithURLParams = false;			var viewerURL = "/WebReports/Viewer/index.cfm";			try {				if(useManagedReports) {					obj = createObject("component","WebReports.Common.Components.portal.reportLibrary").init(df);					qryReport = obj.get(reportID);										if(qryReport.recordCount gt 0) {						// get logged in userID						if(qryUser.recordCount gt 0) userID = qryUser.userID;											// check authorization						if(obj.isUserAuthorized(reportID, userID))							redirect(viewerURL & "?reportID=#reportID#&ExitURL=/WebReports/Portal/&userKey=#session.userKey#");						else							throw("You are not authorized to view this report","validation");					} else {						throw("Requested report not found!","validation");					}								} else {					qryReport = structNew();					qryReport.storedConnectionID = "";					qryReport.datasource = "?";					qryReport.username = "?";					qryReport.password = "?";					qryReport.reportName = reportFileName;					tmpReportFile = getSetting("reportRepositoryPath") & "/" & reportFileName;										if(arg_connectionName neq "") {						obj = createObject("component","WebReports.Common.Components.portal.storedConnections").init(df);						qryStoredConnection = obj.get(arg_connectionName);						tmpDatasource = qryStoredConnection.datasource;						tmpUsername = qryStoredConnection.username;						tmpPassword = qryStoredConnection.password;						bOpenWithURLParams = true;					} else {						if(arg_datasource neq "-1") {							tmpDatasource = arg_datasource;							bOpenWithURLParams = true;						}						if(arg_username neq "-1") {							tmpUsername = arg_username;							bOpenWithURLParams = true;						}						if(arg_password neq "-1") {							tmpPassword = arg_password;							bOpenWithURLParams = true;						}					}								if(bOpenWithURLParams) {						tmpURL = viewerURL & "?report=#tmpReportFile#&ExitURL=/WebReports/Portal/&userKey=#session.userKey#";						tmpURL = tmpURL & "&Datasource=#tmpDataSource#&Username=#tmpUsername#&Password=#tmpPassword#";						redirect(tmpURL);										} else {						obj = createObject("component","WebReports.Common.Components.portal.storedConnections").init(df);						qryConn = obj.getAll();						setValue("qryStoredConnections",qryConn);						if(getSetting("allowedDatasources") eq "*") {							lstDatasources = arrayToList(getDatasources());						} else if(getSetting("allowedDatasources") neq "") {							lstDatasources = getSetting("allowedDatasources");						} else {							lstDatasources = "";						}												setValue("lstDatasources", lstDatasources);												setValue("qryReport",qryReport);						setValue("reportID",reportID);						setView("vwOpen");					}				}						} catch(validation e) {				setMessage("warning", e.message);				setNextEvent("ehGeneral.dspStart");						} catch(any e) {				setMessage("error", e.message & "<br>" & e.detail);				setNextEvent("ehGeneral.dspStart");			}		</cfscript>	</cffunction>	<cffunction name="doAuthReport" access="public" returntype="void">		<cfscript>			var isAuthorized = false;			var oAuthResponse = 0;			var oReportLibrary = 0;			var oStoredConnection = 0;			var df = getService("DAOFactory");			var reportID = val(getValue("reportURL"));			var userKey = getValue("userKey");			var referrer = getValue("referrer");			var stUserSession = structNew();			var userID = 0;						try {				setLayout("Layout.XML");								// create a new response object				oAuthResponse = createObject("component","WebReports.Common.Components.authResponse").init();					// validate report access				if(structKeyExists(application.currentSessions, userKey)) {					// ok, this user has logged in, now check report access					stUserSession = application.currentSessions[userKey];					userID = application.currentSessions[userKey].userID;				}								// validate user access				oReportLibrary = createObject("component","WebReports.Common.Components.portal.reportLibrary").init(df);				isAuthorized = oReportLibrary.isUserAuthorized(reportID, userID);					// populate response object				oAuthResponse.setUserKey(userKey);				oAuthResponse.setIsAuthorized(isAuthorized);								// if authorized, then get db info				if(isAuthorized) {					qryReport = oReportLibrary.get(reportID);					if(qryReport.recordCount eq 0) throw("Requested report was not found!");					if(qryReport.storedConnectionID gt 0) {						oStoredConnection = createObject("component","WebReports.Common.Components.portal.storedConnections").init(df);						qryConn = oStoredConnection.get(qryReport.storedConnectionID);												if(qryConn.datasource neq "?") oAuthResponse.setDatasource(qryConn.datasource);						if(qryConn.username neq "?") oAuthResponse.setUsername(qryConn.username);						if(qryConn.password neq "?") oAuthResponse.setPassword(qryConn.password);						if(qryConn.dbtype neq "?") oAuthResponse.setDBType(qryConn.dbtype);					} else {						if(qryReport.datasource neq "?") oAuthResponse.setDatasource(qryReport.datasource);						if(qryReport.username neq "?") oAuthResponse.setUsername(qryReport.username);						if(qryReport.password neq "?") oAuthResponse.setPassword(qryReport.password);						if(qryReport.dbtype neq "?") oAuthResponse.setDBType(qryReport.dbtype);					}				}							// construct response 				setValue("xmlDoc", oAuthResponse.toXML() );						} catch(any e) {				setMessage("error", e.message & "<br>" & e.detail);				setValue("xmlDoc", 0 );			}		</cfscript>	</cffunction>	<cffunction name="doAuthDesigner" access="public" returntype="void">		<cfscript>			var isAuthorized = false;			var oAuthResponse = 0;			var oUsers = 0;			var df = getService("DAOFactory");			var userKey = getValue("userKey");			var stUserSession = structNew();			var userID = 0;			var qryUser = 0;						try {				setLayout("Layout.XML");								// create a new response object				oAuthResponse = createObject("component","WebReports.Common.Components.authResponse").init();					// validate report access				if(structKeyExists(application.currentSessions, userKey)) {					// ok, this user has logged in, now check report access					stUserSession = application.currentSessions[userKey];					userID = application.currentSessions[userKey].userID;					// check that user has access to Report Designer					oUsers = createObject("component","WebReports.Common.Components.portal.users").init(df);					qryUser = oUsers.searchUsers(userID);					isAuthorized = (qryUser.recordCount gt 0 									and (										(isBoolean(qryUser.isDeveloper) and qryUser.isDeveloper)										or										(isBoolean(qryUser.isAdmin) and qryUser.isAdmin)										)									);				}							// populate response object				oAuthResponse.setUserKey(userKey);				oAuthResponse.setIsAuthorized(isAuthorized);								// construct response 				setValue("xmlDoc", oAuthResponse.toXML() );						} catch(any e) {				setMessage("error", e.message & "<br>" & e.detail);				setValue("xmlDoc", 0 );			}		</cfscript>	</cffunction>	<cffunction name="getFiles" access="private" returntype="query">		<cfargument name="path" required="yes">		<cfset var qryFiles = QueryNew("")>		<cfdirectory action="list" name="qryFiles" directory="#expandPath(arguments.path)#">		<cfreturn qryFiles>	</cffunction>	<cffunction name="getDatasources" access="private" returntype="any">		<cfset var oFactory = CreateObject("java", "coldfusion.server.ServiceFactory")>		<cfset var stDS = oFactory.DataSourceService.getDatasources()>		<cfset var aRet = StructKeyArray(stDS)>		<cfset ArraySort(aRet, "textnocase", "asc")>		<cfreturn aRet>	</cffunction>	<cffunction name="filterReports" access="private" returntype="query">		<cfargument name="query" type="query" required="yes">		<cfargument name="columnList" type="string" required="yes">		<cfargument name="searchValue" type="string" required="yes">		<Cfset var qry = 0>		<cfset var fld = 0>				<cfquery name="qry" dbtype="query">			SELECT <cfloop list="#arguments.columnList#" index="fld">						UPPER(#fld#) as u_#fld#,					</cfloop>					*				FROM arguments.query				WHERE (1=0)					<cfloop list="#arguments.columnList#" index="fld">						OR UPPER(#fld#) LIKE <cfqueryparam cfsqltype="cf_sql_varchar" value="%#UCASE(arguments.searchValue)#%">					</cfloop>		</cfquery>				<cfreturn qry>	</cffunction></cfcomponent>